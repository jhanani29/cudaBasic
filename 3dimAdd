#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include<iostream>
#define N 64

__global__ void add(int *a, int *b, int *c)
{
	int x = blockIdx.x*blockDim.x + threadIdx.x;
	int y = blockIdx.y*blockDim.y + threadIdx.y;
	int z = blockIdx.z*blockDim.z + threadIdx.z;
	int tid = z * 16 + y * 4 + x;

	if (tid < N)
	{
		c[tid] = a[tid] + b[tid];
	}
	__syncthreads();
}

int main(void)
{
	int a[N], b[N], c[N];
	int *dev_a, *dev_b, *dev_c;
	int nx = 4;
	int ny = 4;
	int nz = 4;
	cudaMalloc((void**)&dev_a, N * sizeof(int));
	cudaMalloc((void**)&dev_b, N * sizeof(int));
	cudaMalloc((void**)&dev_c, N * sizeof(int));

	for (int i = 0; i < N; i++)
	{
		a[i] = 1;
		b[i] = 1;
	}
	
	cudaMemcpy(dev_a, a, N * sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, b, N * sizeof(int), cudaMemcpyHostToDevice);

	dim3 block(2,2,2);
	dim3 grid(nx / block.x, ny / block.y,nz/block.z);

	
	add << <grid, block >> > (dev_a, dev_b, dev_c);

	cudaMemcpy(c,dev_c, N * sizeof(int), cudaMemcpyDeviceToHost);
	for (int i = 0; i < N; i++)
	{
		std::cout<<a[i] <<"\n";
		std::cout<<b[i] <<"\n";
		std::cout<<c[i]<<"\n";

	}
	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);
	return 0;
}